import glob, os, string, sys, shutil
sys.path.append('../../../utils')
import scons_utils
sys.path.pop()

LIB_NAME = 'nitf-jni'

# Handle command-line options
opts = scons_utils.add_default_options(Options())
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.do_configure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])
sourceFiles = scons_utils.get_source_files('./source', ext='.c', platform=env['PLATFORM'])

#setup the path/lib vars
depends = ['nitf-c']
build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME, 'depends':depends, 'dynamic':True},]
include_path = ['include', '../nitf/include', '../nitf/source']
lib_path = ['../nitf/%s' % local_lib]
env.Append(CPPPATH = include_path)

env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

#make the lib(s)
libs = scons_utils.make_libs(env, build_libs, local_lib, lib_path)

#make the tests
for test in glob.glob('tests/*.c'):
    testexe = env.Program(test.strip('.c'), [test], LIBS=['%s' % LIB_NAME] + depends + env['LIBS'], LIBPATH=lib_path + [local_lib] + env['LIBPATH'])

dirname, filename = os.path.split(str(libs[0][0]))
ext = os.path.splitext(filename)[1]
env.InstallAs(os.path.join(dirname, 'nitf.jni-c%s' % ext), str(libs[0][0]))
