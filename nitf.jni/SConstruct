import sys, os, glob

sys.path.append('../../build/scons')
import scons_utils
sys.path.pop()

################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'nitf-jni'

# Handle command-line options
opts = scons_utils.add_default_options(Options())
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.do_configure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])
sourceFiles = scons_utils.get_source_files('./source', ext='.c', platform=env['PLATFORM'])

#setup the path/lib vars
depends = ['nitf-c']
build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME, 'depends':depends, 'dynamic':True},]
include_path = ['include', '../nitf/include', '../nitf/source']
lib_path = ['../nitf/%s' % local_lib]
env.Append(CPPPATH = include_path)

env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

#make the lib(s)
libs = scons_utils.make_libs(env, build_libs, local_lib, lib_path)

dirname, filename = os.path.split(str(libs[0][0]))
ext = os.path.splitext(filename)[1]
dll = env.InstallAs(os.path.join(dirname, 'nitf.jni-c%s' % ext), str(libs[0][0]))

#setup install goal
if env.subst('$prefix') and env.subst('$prefix') != '0':
    prefix = env.subst('$prefix')
    env.Alias(target="install", source=env.Install(dir=os.path.join(prefix, 'include'),
              source=glob.glob('include/*.h')))
    env.Alias(target="install", source=env.Install(dir=os.path.join(prefix, local_lib),
              source=dll))

#==============================================================================#
