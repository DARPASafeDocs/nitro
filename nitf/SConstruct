import sys, os, glob

sys.path.append('../../build/scons')
import scons_utils
sys.path.pop()

################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'nitf-c'

# Handle command-line options
opts = scons_utils.add_default_options(Options())
opts.Add('lib_only', 'only compile the lib', 0)
opts.Add('no_plugins', 'don\'t compile the plug-ins', 0)
opts.Add('msvs', 'generate a Visual Studio project', 0)
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.do_configure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])
sourceFiles = scons_utils.get_source_files('./source', ext='.c', platform=env['PLATFORM'])

build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME}]
include_path = ['include']
env.Append(CPPPATH = include_path)
env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

#make the lib(s)
libs = scons_utils.make_libs(env, build_libs, local_lib, [])

if int(env.subst('$msvs')) == 1:
    env.MSVSProject(target = 'NITRO' + env['MSVSPROJECTSUFFIX'],
        srcs = glob.glob('source/*.c'),
        incs = glob.glob('include/*/*.h'),
        buildtarget = libs[0],
        variant = 'Debug')

#see if we only want to build the library
if not int(env.subst('$lib_only')):
    
    ######################
    ### MAKE THE TESTS ###
    ######################
    #Define some tests to build
    TESTS = [
        'test_dump_record.c',
        'test_image_loading.c',
        'test_writer_3.c',
    ]
    
    env.Replace(CPPPATH=['include', 'tests/'])
    # make the test cases
    for test in TESTS:
    	test = os.path.abspath(os.path.join('tests/', test))
        if os.path.exists(test):
            testexe = env.Program(test.strip('.c'), [test],
                LIBS=['%s' % LIB_NAME] + env['LIBS'],
                    LIBPATH=[local_lib] + env['LIBPATH'])
    
    if not int(env.subst('$no_plugins')):
        ########################
        ### MAKE THE PLUGINS ###
        ########################
        SKIP_PLUGINS = []
        pluginEnv = env.Copy()
        pluginEnv.Replace(CPPPATH=include_path)
        pluginEnv['LIBPREFIX'] = ''
        # create dlls for each of our shared objects
        for plugin in glob.glob('shared/*.c'):
            if os.path.basename(plugin) not in SKIP_PLUGINS:
                lib = pluginEnv.SharedLibrary(plugin.strip('.c'),
                    plugin, LIBS=['%s' % LIB_NAME] + env['LIBS'],
                        LIBPATH=[local_lib] + env['LIBPATH'])

#==============================================================================#
