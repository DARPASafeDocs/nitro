import sys, os, glob

sys.path.append('../../build/utils')
import scons_utils
sys.path.pop()

################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'cgm-c'

# Handle command-line options
opts = scons_utils.addDefaultOptions(Options())
opts.Add('lib_only', 'only compile the lib', 0)
opts.Add('no_plugins', 'don\'t compile the plug-ins', 0)
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.doConfigure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])
sourceFiles = scons_utils.getSourceFiles('./source', ext='.c', platform=env['PLATFORM'])

depends = ['nitf']
build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME,
               'depends':['%s-c' % dep for dep in depends], 'dynamic' : env['DYNAMIC']},]
include_path = ['include'] + ['../%s/include' % p for p in depends]
lib_path = [('../%s/%s' % (p, local_lib)) for p in depends]

env.Append(CPPPATH = include_path)
env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

#make the lib(s)
libs = scons_utils.makeLibs(env, build_libs, local_lib, lib_path)

#see if we only want to build the library
if not int(env.subst('$lib_only')):
    #Define some tests to build
    TESTS = [
        'test_read_cgm.c',
    ]
    
    # make the test cases
    for test in TESTS:
    	test = os.path.abspath(os.path.join('tests/', test))
        if os.path.exists(test):
            testexe = env.Program(test.strip('.c'), [test],
                LIBS=['%s' % LIB_NAME] + env['LIBS'] + ['%s-c' % d for d in depends],
                    LIBPATH=[local_lib] + env['LIBPATH'] + lib_path)
    
#==============================================================================#
